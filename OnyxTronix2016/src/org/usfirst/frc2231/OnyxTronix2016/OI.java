// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.OnyxTronix2016;

import org.usfirst.frc2231.OnyxTronix2016.commands.AutonomousCommand;
import org.usfirst.frc2231.OnyxTronix2016.commands.CloseFence;
import org.usfirst.frc2231.OnyxTronix2016.commands.DriveByDistance;
import org.usfirst.frc2231.OnyxTronix2016.commands.DriveStraight;
import org.usfirst.frc2231.OnyxTronix2016.commands.DriveToTarget;
import org.usfirst.frc2231.OnyxTronix2016.commands.OpenFence;
import org.usfirst.frc2231.OnyxTronix2016.commands.RollBackward;
import org.usfirst.frc2231.OnyxTronix2016.commands.RollForward;
import org.usfirst.frc2231.OnyxTronix2016.commands.RollUntilCollected;
import org.usfirst.frc2231.OnyxTronix2016.commands.Shoot;
import org.usfirst.frc2231.OnyxTronix2016.commands.Spin;
import org.usfirst.frc2231.OnyxTronix2016.commands.SpinAtSpeed;
import org.usfirst.frc2231.OnyxTronix2016.commands.StartCompressor;
import org.usfirst.frc2231.OnyxTronix2016.commands.StopCompressor;
import org.usfirst.frc2231.OnyxTronix2016.commands.TurnByDegrees;
import org.usfirst.frc2231.OnyxTronix2016.commands.TurnLeft;
import org.usfirst.frc2231.OnyxTronix2016.commands.TurnRight;
import org.usfirst.frc2231.OnyxTronix2016.commands.checkCollected;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick driveStick;
    public Joystick buttonStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttonStick = new Joystick(1);
        
        driveStick = new Joystick(0);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveStraight", new DriveStraight());
        SmartDashboard.putData("DriveByDistance", new DriveByDistance());
        SmartDashboard.putData("DriveToTarget", new DriveToTarget());
        SmartDashboard.putData("TurnByDegrees", new TurnByDegrees());
        SmartDashboard.putData("TurnLeft", new TurnLeft());
        SmartDashboard.putData("TurnRight", new TurnRight());
        SmartDashboard.putData("RollForward", new RollForward());
        SmartDashboard.putData("RollBackward", new RollBackward());
        SmartDashboard.putData("RollUntilCollected", new RollUntilCollected());
        SmartDashboard.putData("Spin", new Spin());
        SmartDashboard.putData("SpinAtSpeed", new SpinAtSpeed());
        SmartDashboard.putData("Shoot", new Shoot());
        SmartDashboard.putData("OpenFence", new OpenFence());
        SmartDashboard.putData("CloseFence", new CloseFence());
        SmartDashboard.putData("checkCollected", new checkCollected());
        SmartDashboard.putData("StartCompressor", new StartCompressor());
        SmartDashboard.putData("StopCompressor", new StopCompressor());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getbuttonStick() {
        return buttonStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

