// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.OnyxTronix2016;

import edu.wpi.first.wpilibj.CANSpeedController.ControlMode;
import edu.wpi.first.wpilibj.CANTalon.TalonControlMode;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder.IndexingType;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.TalonSRX;
import edu.wpi.first.wpilibj.Ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.vision.AxisCamera;
import edu.wpi.first.wpilibj.vision.USBCamera;
import edu.wpi.first.wpilibj.vision.AxisCamera.Resolution;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController collectorCollectorSpinner;
    public static DigitalInput collectorisCollected;
    public static Encoder driveTrainRightIndexedEncoder;
    public static Encoder driveTrainLeftIndexedEncoder;
    public static Ultrasonic driveTrainUltrasonic1;
    public static Ultrasonic driveTrainUltrasonic2;
    public static SpeedController driveTrainRight;
    public static SpeedController driveTrainLeft;
    public static RobotDrive driveTrainRobotDrive21;
    public static SpeedController shooterShooterLeftMotor;
    public static Encoder shooterShooterIndexedEncoder;
    public static SpeedController shooterShooterRightMotor;
    public static SpeedController climberSpeedController1;
    public static SpeedController climberSpeedController2;
    public static Solenoid reloaderleftOpenSolenoid;
    public static Solenoid reloaderleftCloseSolenoid;
    public static Solenoid reloaderrightOpenSolenoid;
    public static Solenoid reloaderrightCloseSolenoid;
    public static Compressor reloaderCompressor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static AxisCamera shooterCamera;
    public static USBCamera driveCamera; // add Camera

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        collectorCollectorSpinner = new Talon(2);
        LiveWindow.addActuator("Collector", "CollectorSpinner", (Talon) collectorCollectorSpinner);
        
        collectorisCollected = new DigitalInput(7);
        LiveWindow.addSensor("Collector", "isCollected", collectorisCollected);
        
        driveTrainRightIndexedEncoder = new Encoder(12, 13, false);
        LiveWindow.addSensor("DriveTrain", "RightIndexedEncoder", driveTrainRightIndexedEncoder);
        driveTrainRightIndexedEncoder.setDistancePerPulse(1.0);
        driveTrainRightIndexedEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainRightIndexedEncoder.setIndexSource(14, IndexingType.kResetOnRisingEdge);
        driveTrainLeftIndexedEncoder = new Encoder(0, 1, false);
        LiveWindow.addSensor("DriveTrain", "LeftIndexedEncoder", driveTrainLeftIndexedEncoder);
        driveTrainLeftIndexedEncoder.setDistancePerPulse(1.0);
        driveTrainLeftIndexedEncoder.setPIDSourceType(PIDSourceType.kRate);
        driveTrainLeftIndexedEncoder.setIndexSource(2, IndexingType.kResetOnRisingEdge);
        driveTrainUltrasonic1 = new Ultrasonic(3, 4);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic 1", driveTrainUltrasonic1);
        
        driveTrainUltrasonic2 = new Ultrasonic(5, 6);
        LiveWindow.addSensor("DriveTrain", "Ultrasonic 2", driveTrainUltrasonic2);
        
        driveTrainRight = new TalonSRX(1);
        LiveWindow.addActuator("DriveTrain", "Right", (TalonSRX) driveTrainRight);
        
        driveTrainLeft = new TalonSRX(0);
        LiveWindow.addActuator("DriveTrain", "Left", (TalonSRX) driveTrainLeft);
        
        driveTrainRobotDrive21 = new RobotDrive(driveTrainLeft, driveTrainRight);
        
        driveTrainRobotDrive21.setSafetyEnabled(true);
        driveTrainRobotDrive21.setExpiration(0.1);
        driveTrainRobotDrive21.setSensitivity(0.5);
        driveTrainRobotDrive21.setMaxOutput(1.0);

        shooterShooterLeftMotor = new Spark(3);
        LiveWindow.addActuator("Shooter", "ShooterLeftMotor", (Spark) shooterShooterLeftMotor);
        
        shooterShooterIndexedEncoder = new Encoder(8, 9, false);
        LiveWindow.addSensor("Shooter", "ShooterIndexedEncoder", shooterShooterIndexedEncoder);
        shooterShooterIndexedEncoder.setDistancePerPulse(1.0);
        shooterShooterIndexedEncoder.setPIDSourceType(PIDSourceType.kRate);
        shooterShooterIndexedEncoder.setIndexSource(10, IndexingType.kResetOnRisingEdge);
        shooterShooterRightMotor = new Talon(4);
        LiveWindow.addActuator("Shooter", "ShooterRightMotor", (Talon) shooterShooterRightMotor);
        
        climberSpeedController1 = new Talon(5);
        LiveWindow.addActuator("Climber", "Speed Controller 1", (Talon) climberSpeedController1);
        
        climberSpeedController2 = new Talon(6);
        LiveWindow.addActuator("Climber", "Speed Controller 2", (Talon) climberSpeedController2);
        
        reloaderleftOpenSolenoid = new Solenoid(0, 0);
        LiveWindow.addActuator("Reloader", "leftOpenSolenoid", reloaderleftOpenSolenoid);
        
        reloaderleftCloseSolenoid = new Solenoid(0, 1);
        LiveWindow.addActuator("Reloader", "leftCloseSolenoid", reloaderleftCloseSolenoid);
        
        reloaderrightOpenSolenoid = new Solenoid(0, 2);
        LiveWindow.addActuator("Reloader", "rightOpenSolenoid", reloaderrightOpenSolenoid);
        
        reloaderrightCloseSolenoid = new Solenoid(0, 3);
        LiveWindow.addActuator("Reloader", "rightCloseSolenoid", reloaderrightCloseSolenoid);
        
        reloaderCompressor = new Compressor(0);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        shooterCamera = new AxisCamera("10.22.31.11");
        shooterCamera.writeResolution(Resolution.k320x240);
        
    }
}
