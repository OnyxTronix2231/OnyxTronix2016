// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2231.OnyxTronix2016.subsystems;

import org.usfirst.frc2231.OnyxTronix2016.Robot;
import org.usfirst.frc2231.OnyxTronix2016.RobotMap;
import org.usfirst.frc2231.OnyxTronix2016.commands.*;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Shooter extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    private static final double SENSITIVITY_VALUE = 0.15;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Encoder shooterRightEncoder = RobotMap.shooterShooterRightEncoder;
    private final SpeedController shooterRightMotor = RobotMap.shooterShooterRightMotor;
    private final PIDController rightPIDController = RobotMap.shooterRightPIDController;
    private final SpeedController shooterLeftMotor = RobotMap.shooterShooterLeftMotor;
    private final Encoder shooterLeftEncoder = RobotMap.shooterShooterLeftEncoder;
    private final PIDController leftPIDController = RobotMap.shooterLeftPIDController;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public boolean isReady = false;
    public double speed = 1;
    // Initialize your subsystem here
    public Shooter() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
        super("Shooter");

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PIDController
        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }

    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return shooterLeftEncoder.pidGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
    }

    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
        shooterLeftMotor.pidWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    }
    
	public void spinWheels(boolean isSpinning) {
		if (isSpinning) {
			shooterLeftMotor.set(-1);
			shooterRightMotor.set(1);
		} else {	
			shooterLeftMotor.set(0);
			shooterRightMotor.set(0);
		}
	}
	
	
	public void stopCollection()
	{	
		Robot.reloader.load(0);
		Robot.collector.roll(0);
	}
	
	public void spinWheelsAtSpeed(double speed) {
		double spinSpeed = speed > SENSITIVITY_VALUE ? speed : 0;
		shooterLeftMotor.set(spinSpeed);
		shooterRightMotor.set(spinSpeed);
	}
	
	public boolean isReady(){
		return this.isReady;
	}
	
	public void setReady(boolean situation){
		this.isReady = situation;
	}
	
}
