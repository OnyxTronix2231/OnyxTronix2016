// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2231.OnyxTronix2016.subsystems;

import org.usfirst.frc2231.OnyxTronix2016.Robot;
import org.usfirst.frc2231.OnyxTronix2016.RobotMap;
import org.usfirst.frc2231.OnyxTronix2016.StickButtons;
import org.usfirst.frc2231.OnyxTronix2016.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;

/**
 *
 */
public class Shooter extends Subsystem {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController shooterLeftMotor = RobotMap.shooterShooterLeftMotor;
    private final Encoder shooterIndexedEncoder = RobotMap.shooterShooterIndexedEncoder;
    private final SpeedController shooterRightMotor = RobotMap.shooterShooterRightMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final double SENSITIVITY_VALUE = 0.15;
	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	
	boolean isFinished = true;
	public void spinWheels() {
		
		if (Robot.oi.getbuttonStick().getRawButton(StickButtons.Buttons.A.getValue())) {
			shooterLeftMotor.set(-1);
			shooterRightMotor.set(1);
			isFinished = false;
		} else if (Robot.oi.getbuttonStick().getRawButton(StickButtons.Buttons.B.getValue())) {	
			shooterLeftMotor.set(1);
			shooterRightMotor.set(-1);
			isFinished = false;
		} else if(!isFinished){
			shooterLeftMotor.set(0);
			shooterRightMotor.set(0);
			isFinished = true;
			
		}

	}
	
	
	public void stopCollection()
	{	
		if(Robot.reloader.getCurrentCommand().getClass() == StartReloader.class) {
			Robot.reloader.getCurrentCommand().cancel();
		}
		if(Robot.collector.getCurrentCommand().getClass() == RollForward.class) {
			Robot.collector.getCurrentCommand().cancel();
		}
	
	}
	
	public void spinWheelsAtSpeed(double speed) {
		double spinSpeed = -speed > SENSITIVITY_VALUE ? -speed : 0;
		shooterLeftMotor.set(-spinSpeed);
		shooterRightMotor.set(spinSpeed);

	}
}
